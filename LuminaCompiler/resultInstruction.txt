

import "lumina/screenConstants" 

import "shader/customInclude.lum" 


Input -> VertexPass : Vector3 vertexPosition ; 

Input -> VertexPass : Vector3 vertexNormal ; 

Input -> VertexPass : Vector2 vertexUV ; 

VertexPass -> FragmentPass : Vector3 fragPosition ; 

VertexPass -> FragmentPass : Vector3 fragNormal ; 

VertexPass -> FragmentPass : Vector2 fragUV ; 






VertexPass ( ) 
{ 
    Vector4 worldPosition = modelAttributes . modelMatrix * Vector4 ( vertexPosition , 1.0 ) ; 
    fragPosition = worldPosition . xyz ; 
    fragNormal = mat3 ( modelAttributes . normalMatrix ) * vertexNormal ; 
    fragUV = vertexUV ; 
    Vector4 clipSpacePosition = screenConstants . canvasMVP * worldPosition ; 
    pixelPosition = clipSpacePosition ; 
} 


FragmentPass ( ) 
{ 
    if ( lightingConstants . ambientIntensity < 0.0 || lightingConstants . ambientIntensity > 1.0 ) 
    { 
        raiseException ( "Ambient intensity must be between 0 and 1. Current value: %d" , lightingConstants . ambientIntensity ) ; 
    } 
    Vector3 normal = normalize ( fragNormal ) ; 
    Vector3 lightDir = normalize ( lightingConstants . lightPosition - fragPosition ) ; 
    Vector3 viewDir = normalize ( - fragPosition ) ; 
    Vector3 ambient = lightingConstants . ambientIntensity * lightingConstants . lightColor ; 
    for ( int i = 0 ; i < 4 ; i ++ ) 
    { 
        Vector3 test = Vector3 ( 10 , 11 , 12 ) ; 
    } 
    Vector3 diffuse = Lighting :: calculateDiffuse ( normal , lightDir , lightingConstants . lightColor ) ; 
    Material material ; 
    Vector3 specular = Lighting :: calculateSpecular ( normal , lightDir , viewDir , material . _shininess , lightingConstants . lightColor ) ; 
    Vector3 finalColor = ambient + diffuse * material . _diffuseColor + specular * material . _specularColor ; 
    Vector4 textureColor = diffuseTexture . pixel ( fragUV ) ; 
    finalColor * = textureColor . rgb ; 
    if ( textureColor . a == 0 ) 
    { 
        discard ; 
    } 
    pixelColor = Vector4 ( finalColor , textureColor . a ) ; 
} 
