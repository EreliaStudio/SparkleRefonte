// Include predefined and user-provided files
#include <screenConstants>      /*invalid
*/
#include "shader/customInclude.lum"

// Define the pipeline flow
Input -> VertexPass: Vector3 vertexPosition;
Input -> VertexPass: Vector3 vertexNormal;
Input -> VertexPass: Vector2 vertexUV;
VertexPass -> FragmentPass: Vector3 fragPosition;
VertexPass -> FragmentPass: Vector3 fragNormal;
VertexPass -> FragmentPass: Vector2 fragUV;

// Define custom structures
struct Material
{
    Vector3 _diffuseColor = Vector3(1.0, 0.5, 0.3);
    Vector3 _specularColor = Vector3(1.0);
    float _shininess = 32.0;
};

// Define a texture
Texture diffuseTexture;

// Define attribute blocks
AttributeBlock modelAttributes
{
    Matrix4x4 modelMatrix;
    Matrix4x4 normalMatrix;
};

// Define constant blocks
ConstantBlock lightingConstants
{
    Vector3 lightPosition = Vector3(10.0, 10.0, 10.0);
    Vector3 lightColor = Vector3(1.0);
    float ambientIntensity = 0.1;
};

/* Create namespaces
with multiline comments */
namespace Lighting
{
    Vector3 calculateDiffuse(Vector3 normal, Vector3 lightDir, Vector3 lightColor)
    {
        float diff = max(dot(normal, lightDir), 0.0);
        return diff * lightColor;
    }

    Vector3 calculateSpecular(Vector3 normal, Vector3 lightDir, Vector3 viewDir, float shininess, Vector3 lightColor)
    {
        Vector3 reflectDir = reflect(-lightDir, normal);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
        return spec * lightColor;
    }
}

// Define the vertex shader stage
VertexPass()
{
    Vector4 worldPosition = modelAttributes.modelMatrix * Vector4(vertexPosition, 1.0);
    fragPosition = worldPosition.xyz;
    fragNormal = mat3(modelAttributes.normalMatrix) * vertexNormal;
    fragUV = vertexUV;

    Vector4 clipSpacePosition = screenConstants.canvasMVP * worldPosition;
    pixelPosition = clipSpacePosition;
}

// Define the fragment shader stage
FragmentPass()
{
    // Error handling example
    if (lightingConstants.ambientIntensity < 0.0 || lightingConstants.ambientIntensity > 1.0)
    {
        raiseException("Ambient intensity must be between 0 and 1. Current value: %d", lightingConstants.ambientIntensity);
    }

    Vector3 normal = normalize(fragNormal);
    Vector3 lightDir = normalize(lightingConstants.lightPosition - fragPosition);
    Vector3 viewDir = normalize(-fragPosition);

    Vector3 ambient = lightingConstants.ambientIntensity * lightingConstants.lightColor;

    Vector3 diffuse = Lighting::calculateDiffuse(normal, lightDir, lightingConstants.lightColor);

    Material material;
    Vector3 specular = Lighting::calculateSpecular(normal, lightDir, viewDir, material._shininess, lightingConstants.lightColor);

    Vector3 finalColor = ambient + diffuse * material._diffuseColor + specular * material._specularColor;

    Vector4 textureColor = diffuseTexture.pixel(fragUV);
    finalColor *= textureColor.rgb;

    if (textureColor.a == 0)
    {
        discard;
    }

    pixelColor = Vector4(finalColor, textureColor.a);
}